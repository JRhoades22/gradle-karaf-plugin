
// *****************************************************************************
//
// *****************************************************************************

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
    }
}

// *****************************************************************************
//
// *****************************************************************************

plugins {
    id 'java'
    id 'groovy'
    id 'maven'
    id 'signing'
    id 'com.gradle.plugin-publish' version '0.9.5'
    id 'net.researchgate.release' version '2.4.1'
}

apply plugin: 'io.codearte.nexus-staging'

// *****************************************************************************
//
// *****************************************************************************

group               = 'com.github.lburgazzoli'
description         = 'A gradle plugin for Karaf'
sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

ext {
    gradleVersion     = '3.0'
    gradleScriptDir   = "${rootProject.projectDir}/gradle"
    gradlePluginId    = "com.github.lburgazzoli.karaf"
    gradlePluginTags  = [ 'karaf' ]
    isReleaseVersion  = !version.endsWith("SNAPSHOT")
    isSnapshotVersion = version.endsWith("SNAPSHOT")
    isCI              = Boolean.valueOf("$System.env.CI")
    gitRoot           = "https://github.com/lburgazzoli"
    gitProject        = "https://github.com/lburgazzoli/gradle-karaf-plugin"
    gitURL            = "git@github.com:lburgazzoli/gradle-karaf-plugin"
    groovyVersion     = GroovySystem.version.replaceAll(/\.\d+$/,'')

    versions = [
        slf4j : '1.7.21',
        spock : "1.0-groovy-${groovyVersion}"
    ]

    if (isReleaseVersion) {
        nexusUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    } else {
        nexusUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }

    if (isCI && isReleaseVersion) {
        nexusUsername = ""
        nexusPassword = ""
    } else if(!project.hasProperty('nexusUsername') && !project.hasProperty('nexusPassword')) {
        nexusUsername = "$System.env.CI_DEPLOY_USERNAME"
        nexusPassword = "$System.env.CI_DEPLOY_PASSWORD"
    }
}

repositories {
    mavenCentral()    
    mavenLocal()
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile("org.spockframework:spock-core:$versions.spock") {
        exclude(module: 'groovy-all')
    }
}

project.tasks.withType(org.gradle.api.tasks.compile.JavaCompile) {
    it.sourceCompatibility = project.sourceCompatibility
    it.targetCompatibility = project.targetCompatibility
}

project.tasks.withType(org.gradle.api.tasks.compile.GroovyCompile) {
    it.sourceCompatibility = project.sourceCompatibility
    it.targetCompatibility = project.targetCompatibility
}

jar {
    baseName = "${project.name}"

    manifest {
        attributes['Implementation-Title'   ] = "${group}.${project.name}-${project.version}"
        attributes['Implementation-Version' ] = project.version
        attributes['Implementation-Vendor'  ] = 'Luca Burgazzoli'
    }
}

// *****************************************************************************
// ARTIFACTS
// *****************************************************************************

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier 'groovydoc'
    from groovydoc.destinationDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives groovydocJar
    archives javadocJar
}

// *****************************************************************************
// Publish to gradle Plugins
// *****************************************************************************

pluginBundle {
    website     = project.gitProject
    vcsUrl      = project.gitProject
    description = project.name
    tags        = gradlePluginTags

    plugins {
        karafPlugin {
            id          = gradlePluginId
            displayName = project.description
        }
    }
}

// *****************************************************************************
// Publish to Sonatype OSS
// *****************************************************************************

signing {
    required { 
        isReleaseVersion
    }

    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { 
                MavenDeployment deployment -> signing.signPom(deployment) 
            }

            pom.groupId = project.group
            pom.artifactId = project.name
            pom.version = project.version

            repository(url: project.ext.nexusUrl) {
                authentication(userName: project.nexusUsername, project.nexusPassword)
            }

            pom.project {
                name project.name
                description project.name
                url project.gitProject

                scm {
                    url project.gitProject
                    connection "scm:${project.gitProject}"
                    developerConnection "scm:${project.gitURL}"
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'lburgazzoli'
                        name 'Luca Burgazzoli'
                    }
                }
            }
        }
    }
}

// *****************************************************************************
//
// *****************************************************************************

afterReleaseBuild.dependsOn publishPlugins, uploadArchives
